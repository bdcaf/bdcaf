<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>script | bdcaf</title><link>/tags/script/</link><atom:link href="/tags/script/index.xml" rel="self" type="application/rss+xml"/><description>script</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Clemens Ager 2020</copyright><lastBuildDate>Thu, 14 Jun 2018 08:42:28 +0200</lastBuildDate><image><url>img/map[gravatar:%!s(bool=false) shape:circle]</url><title>script</title><link>/tags/script/</link></image><item><title>Mass editing tags</title><link>/post/site/mass_editing_tags/</link><pubDate>Thu, 14 Jun 2018 08:42:28 +0200</pubDate><guid>/post/site/mass_editing_tags/</guid><description>&lt;p>Having read some about the
&lt;a href="https://github.com/rstudio/blogdown" target="_blank" rel="noopener">blogdown&lt;/a> package I thought I
could cleanup my site some more.&lt;/p>
&lt;p>I came up with some scripts to clean up tags.&lt;/p>
&lt;p>Within R I could use some of the new functionality.&lt;/p>
&lt;pre>&lt;code>a &amp;lt;- blogdown:::collect_yaml()
&lt;/code>&lt;/pre>
&lt;p>would give me a nice list of my categories and tags.&lt;/p>
&lt;p>First I would check how many files would use the offending
tags. I use
&lt;a href="https://github.com/BurntSushi/ripgrep" target="_blank" rel="noopener">ripgrep&lt;/a> for my
searches. To avoid replacements inside text I chose to use a regexp
as search expression. In my case that avoided all collisions.&lt;/p>
&lt;pre>&lt;code>rg '^- offending'
&lt;/code>&lt;/pre>
&lt;p>Then if it&amp;rsquo;s just one or two I can edit them. Just a warning I use
fish and neovim - so adjust accordingly.&lt;/p>
&lt;pre>&lt;code>nvim (rg '^- offending')
&lt;/code>&lt;/pre>
&lt;p>To correct spelling I did replacements like this:&lt;/p>
&lt;pre>&lt;code>rg '^\W*- maths$' --files-with-matches | xargs sed -i '' 's/^\( *- *\) maths$/\1math/g'
&lt;/code>&lt;/pre>
&lt;p>annoyingly macs &lt;code>sed&lt;/code> did not support the &lt;code>\s&lt;/code> pattern.&lt;/p>
&lt;p>Fully removing a tag was done so:&lt;/p>
&lt;pre>&lt;code>rg '^- Allgemein' --files-with-matches | xargs sed -i '' '/^- Allgemein/d'
&lt;/code>&lt;/pre>
&lt;p>I think soon I will move stuff in subfolders. For now this shouldn&amp;rsquo;t
be problematic as there are almost no files in the data folder. Also
I still have unresolved links to images in the old imports. But
that&amp;rsquo;s for another day.&lt;/p>
&lt;h3 id="trouble-shooting">trouble shooting&lt;/h3>
&lt;p>I soon ended up having errors about empty section lists.
Unfortunately it turned out too many. And ripgrep wouldn&amp;rsquo;t match
multiline patterns. So time to also use the (slower)
&lt;a href="https://github.com/ggreer/the_silver_searcher" target="_blank" rel="noopener">silver searcher&lt;/a>.&lt;/p>
&lt;pre>&lt;code>ag -l &amp;quot;^categories:\n--&amp;quot; | xargs sed -i -e '/^categories:/d'
ag -l &amp;quot;^categories:\n[^ -]&amp;quot; | xargs sed -i -e '/^categories:/d'
&lt;/code>&lt;/pre>
&lt;p>would delete the empty categories.&lt;/p>
&lt;h4 id="cases">cases&amp;hellip;&lt;/h4>
&lt;p>It was a bit tricky as the page of tags showed them all in lower case - and I could locate them nicely using &lt;code>rg -i&lt;/code> - however mac os &lt;code>sed&lt;/code>
was not able to ignore cases in patterns.&lt;/p></description></item></channel></rss>